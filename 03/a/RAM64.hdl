// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out hold the value
 * stored at the memory location specified by address. If load=1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out after the next time step.)
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:

    // Distribute the load bit
    DMux8Way(in=load, sel=address[3..5], a=loadA, b=loadB, c=loadC, d=loadD, e=loadE, f=loadF, g=loadG, h=loadH);

    RAM8(in=in, load=loadA, address=address[0..2], out=ramAout);
    RAM8(in=in, load=loadB, address=address[0..2], out=ramBout);
    RAM8(in=in, load=loadC, address=address[0..2], out=ramCout);
    RAM8(in=in, load=loadD, address=address[0..2], out=ramDout);
    RAM8(in=in, load=loadE, address=address[0..2], out=ramEout);
    RAM8(in=in, load=loadF, address=address[0..2], out=ramFout);
    RAM8(in=in, load=loadG, address=address[0..2], out=ramGout);
    RAM8(in=in, load=loadH, address=address[0..2], out=ramHout);

    Mux8Way16(a=ramAout, b=ramBout, c=ramCout, d=ramDout, e=ramEout, f=ramFout, g=ramGout, h=ramHout, sel=address[3..5], out=out);
}
