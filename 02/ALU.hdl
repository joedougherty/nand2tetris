// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * The bit-combinations that yield each function are 
 * documented in the book. In addition, the ALU 
 * computes two 1-bit outputs: if the ALU output
 * is 0, zr is set to 1; otherwise zr is set to 0;
 * If out<0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values, 
// as follows:
// if (zx==1) set x = 0        // 16-bit constant
// if (nx==1) set x = ~x       // bitwise "not"
// if (zy==1) set y = 0        // 16-bit constant
// if (ny==1) set y = ~y       // bitwise "not"
// if (f==1)  set out = x + y  // integer 2's complement addition
// if (f==0)  set out = x & y  // bitwise "and"
// if (no==1) set out = ~out   // bitwise "not"
// if (out==0) set zr = 1
// if (out<0) set ng = 1

  
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute  out = x + y (if 1) or out = x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out==0), 0 otherwise
        ng; // 1 if (out<0),  0 otherwise

    PARTS:
    // ZX
    DMux16(in=x, sel=zx, a=zxa, b=zxb); 
    And16(a=zxb, b[0..15]=false, out=zerozxb);
    Mux16(a=zxa, b=zerozxb, sel=zx, out=zxmuxout); 

    // NX
    DMux16(in=zxmuxout, sel=nx, a=nxa, b=nxb);
    Not16(in=nxb, out=notnxb);
    Mux16(a=nxa, b=notnxb, sel=nx, out=nxmuxout);

    // ZY
    DMux16(in=y, sel=zy, a=zya, b=zyb);
    And16(a=zyb, b[0..15]=false, out=zerozyb);
    Mux16(a=zya, b=zerozyb, sel=zy, out=zymuxout);

    // NY
    DMux16(in=zymuxout, sel=ny, a=nya, b=nyb);
    Not16(in=nyb, out=notnyb);
    Mux16(a=nya, b=notnyb, sel=ny, out=nymuxout);

    // 16-bit AND output     
    And16(a=nxmuxout, b=nymuxout, out=and16out);
    
    // 16-bit ADD output
    Add16(a=nxmuxout, b=nymuxout, out=add16out);

    // F
    Mux16(a=and16out, b=add16out, sel=f, out=fmuxout);

    // NO
    DMux16(in=fmuxout, sel=no, a=noa, b=nob);
    Not16(in=nob, out=notnob);
    Mux16(a=noa, b=notnob, sel=no, out=out, out[15]=ng, out[0..7]=leftcomp, out[8..15]=rightcomp);

    // ZR
    Or8Way(in=leftcomp, out=leftor);
    Or8Way(in=rightcomp, out=rightor);
    Or(a=leftor, b=rightor, out=orout);
    Not(in=orout, out=zr);
}
